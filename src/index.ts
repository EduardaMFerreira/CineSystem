import express, { Express, Request, Response } from "express";
import salaRoutes from "./routes/salaRoutes";
import filmeRoutes from "./routes/filmeRoutes";
import sessaoRoutes from "./routes/sessaoRoutes"; 
import { swaggerUi, swaggerSpec } from "./swagger";

const app: Express = express();
const port: number = 3000;

// Middleware para interpretar requisiÃ§Ãµes JSON
app.use(express.json());

/**
 * Rota do Swagger para documentaÃ§Ã£o da API.
 *
 * - URL: /api-docs
 * - Utiliza `swaggerUi.serve` e `swaggerUi.setup` para servir a interface Swagger
 * - Permite visualizar todas as rotas, parÃ¢metros e schemas definidos
 */
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

/**
 * Rota base da API.
 *
 * - URL: /
 * - MÃ©todo: GET
 * - Retorna uma mensagem simples indicando que a API estÃ¡ rodando
 */
app.get("/", (req: Request, res: Response) => {
  res.send("API de Cinema estÃ¡ rodando ðŸŽ¬");
});

/**
 * Rotas principais da aplicaÃ§Ã£o.
 *
 * - `/salas` â†’ rotas relacionadas a salas de cinema (CRUD)
 * - `/filmes` â†’ rotas relacionadas a filmes (CRUD)
 * - `/sessoes` â†’ rotas relacionadas a sessÃµes de cinema (CRUD)
 */
app.use("/salas", salaRoutes);
app.use("/filmes", filmeRoutes);
app.use("/sessoes", sessaoRoutes);

/**
 * Inicializa o servidor Express.
 *
 * - Porta definida em `port`
 * - Mostra no console que o servidor estÃ¡ rodando e o link do Swagger
 */
app.listen(port, () => {
  console.log(`ðŸš€ Servidor rodando na porta ${port}`);
  console.log(`ðŸ“˜ Swagger disponÃ­vel em: http://localhost:${port}/api-docs`);
});
